name: CI

on:
  push:
    branches: [main]
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  fmt:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  lint:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        toolchain: [stable]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          components: clippy
          override: true

      - name: Run Cargo Clippy
        run:
          cargo clippy
          --all-features
          --message-format=json
          -- -D warnings
        continue-on-error: true

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        toolchain: [stable]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true

      - name: Run Cargo Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --tests --all-features

  coverage:
    runs-on: ubuntu-latest
    needs: [fmt, lint, build]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: llvm-tools-preview

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2

      - name: Install grcov
        run: |
          curl -L https://github.com/mozilla/grcov/releases/latest/download/grcov-x86_64-unknown-linux-gnu.tar.bz2 | tar jxfv -
          chmod +x grcov && mv grcov ~/.cargo/bin/

      - name: Build code coverage
        run: |
          cargo test --tests --all-features
          grcov . --binary-path ./target/debug/ --source-dir . --log-level ERROR --branch --ignore-not-existing --ignore "*cargo*" -t html -o ./coverage/
          grcov . --binary-path ./target/debug/ --source-dir . --log-level ERROR --branch --ignore-not-existing --ignore "*cargo*" -t lcov -o coverage.lcov
        env:
          RUSTFLAGS: -Cinstrument-coverage
          CARGO_INCREMENTAL: 0
          LLVM_PROFILE_FILE: target/coverage-%p-%m.profraw

      - name: Upload code coverage results to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: coverage.lcov
          flags: unittests
          name: codecov-umbrella
          verbose: true
          fail_ci_if_error: true

      - name: Upload code coverage results to GitHub
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: coverage
